# Environment variables declared in this file are automatically made available to Prisma.
# See the documentation for more detail: https://pris.ly/d/prisma-schema#accessing-environment-variables-from-the-schema

# Prisma supports the native connection string format for PostgreSQL, MySQL, SQLite, SQL Server, MongoDB and CockroachDB.
# See the documentation for all the connection string options: https://pris.ly/d/connection-strings

# =========================
# 🌱 Environment Mode
# =========================
# Set to 'development' or 'production' --- note render will set its own variables... we use development for local use 
# and variables that might have two separate uses such as client vs testing email
NODE_ENV=development
VITE_NODE_ENV=development

# =========================
# 🗄️ Database (Prisma/PostgreSQL)
# =========================
# Local Postgres setup: username 'postgres', password '2322', database 'devprofiles', host 'localhost', port 5432
DATABASE_URL="postgresql://postgres:2322@localhost:5432/devprofiles?schema=public"

# =========================
# ⚡ Vite Frontend
# =========================
# The port Vite will run on (default: 5173)
VITE_PORT=5173

# The public URL of your site (for Vite, if needed)
VITE_PUBLIC_URL=http://localhost:5173

# =========================
# 🚀 Express/Node Backend
# =========================
# The port your Express server runs on
PORT=3001

# =========================
# 🔑 GitHub REST API Integration
# =========================
# Personal Access Token or GitHub App token for API requests
GITHUB_TOKEN=ghp_yourgithubtokenhere

# GitHub API base URL (default, override if using GitHub Enterprise)
GITHUB_API_URL=https://api.github.com

# =========================
# 📨 Email/SMTP (Optional, if needed)
# =========================
# SMTP_HOST=smtp.example.com
# SMTP_PORT=587
# SMTP_USER=youruser
# SMTP_PASS=yourpassword

# =========================
# 🛡️ Security/Secrets (Optional)
# =========================
# JWT_SECRET=your_jwt_secret_here
# SESSION_SECRET=your_session_secret_here

# =========================
# 📝 Other Custom Variables (Optional)
# =========================
# Add any other custom env variables your app needs here





# =================================================================
# EMAIL ENVIRONMENT CONFIGURATION GUIDE
# =================================================================

# IMPORTANT: DO NOT SET NODE_ENV IN THIS FILE
# The NODE_ENV is automatically set by npm scripts:
#  - npm run dev    -> sets NODE_ENV=development (uses Ethereal)
#  - npm run start  -> sets NODE_ENV=production (uses real email)
# 
# If you set NODE_ENV here, it will override the npm script settings
# and your email configuration may not work as expected.

# =================================================================
# SERVER CONFIGURATION
# =================================================================
PORT=3000

# =================================================================
# OPTIONAL ENV STRICT SETTING BY DEV
# =================================================================
# Uncomment the line below to enable strict mode

##NODE_ENV=developmentORproduction

# =================================================================
# EMAIL CONFIGURATION
# =================================================================
# These settings are used in production mode (npm run start)
# In development mode (npm run dev), Ethereal is used instead

# Email Service: gmail or outlook
EMAIL_SERVICE=gmail

# Your email address
EMAIL_USER=pelycluk@gmail.com

# For Gmail: Use an App Password (not your regular password)
# How to create an App Password:
# 1. Enable 2-Step Verification in your Google Account
# 2. Go to Security → App Passwords
# 3. Generate a new password for "Mail" on "Other (Custom name)"
# 4. Paste the 16-character code here (no spaces)
EMAIL_PASS=dtiy lwsa qmsp imfd

# Optional: Where to send contact form submissions
# If not set, defaults to EMAIL_USER
EMAIL_RECIPIENT=pelycluk@gmail.com

# =================================================================
# EMAIL PROVIDER INSTRUCTIONS
# =================================================================
# GMAIL SETUP:
# - Set EMAIL_SERVICE=gmail
# - Set EMAIL_USER to your Gmail address
# - Set EMAIL_PASS to your App Password (not regular password)
# - You MUST enable 2-Step Verification in your Google Account
# - App Passwords are 16 characters with no spaces
#
# OUTLOOK SETUP:
# - Set EMAIL_SERVICE=outlook
# - Set EMAIL_USER to your Outlook/Hotmail address
# - Set EMAIL_PASS to your password (or App Password if using 2FA)
# - Outlook uses different SMTP settings handled automatically by the app
#   (host: 'smtp-mail.outlook.com', port: 587, secure: false)

# =================================================================
# ALTERNATIVE ENVIRONMENT SETUP METHOD
# =================================================================
# Instead of a single .env file, you can use two separate files:
#
# .env.development - Used when running 'npm run dev'
# Contains:
#   PORT=3000
#   (No EMAIL_* variables needed for development)
#
# .env.production - Used when running 'npm run start'
# Contains:
#   PORT=3000
#   EMAIL_SERVICE=gmail
#   EMAIL_USER=your-email@gmail.com
#   EMAIL_PASS=your-app-password
#   EMAIL_RECIPIENT=recipient@example.com
#
# You would need to modify server.js to load the correct file:
# ```
# const env = process.env.NODE_ENV || 'development'
# dotenv.config({ path: `.env.${env}` })
# ```

# =================================================================
# HOW IT WORKS
# =================================================================
# When NODE_ENV=development:
#  - Emails are caught by Ethereal
#  - No real emails are sent
#  - You'll get a preview URL in the console
#
# When NODE_ENV=production:
#  - Real emails are sent via Gmail/Outlook
#  - EMAIL_SERVICE, EMAIL_USER, EMAIL_PASS must be set
#  - Recipient will receive the actual email

# =================================================================
# EXAMPLE CONFIGURATIONS (COMMENTED OUT)
# =================================================================
# Gmail Example:
# EMAIL_SERVICE=gmail
# EMAIL_USER=your-gmail@gmail.com
# EMAIL_PASS=abcdefghijklmnop  # 16-character App Password
# EMAIL_RECIPIENT=recipient@example.com

# Outlook Example:
# EMAIL_SERVICE=outlook
# EMAIL_USER=your-outlook@hotmail.com
# EMAIL_PASS=YourOutlookPassword  # Regular password or App Password if using 2FA
# EMAIL_RECIPIENT=recipient@example.com










# =========================
# 📚 NOTE: About This .env File and Environment Modes
# =========================
#
# Why does this file exist?
# - This .env file is for LOCAL DEVELOPMENT and ONBOARDING.
# - It documents all environment variables your app needs to run.
# - Each developer can use or customize their own .env for local setup.
#
# How does it work in production (e.g., Render)?
# - Production hosts like Render DO NOT use this file directly.
# - Instead, you must set all required variables in the Render dashboard (or your host's env settings).
# - At build and runtime, Render injects these variables into your app's environment.
#
# Why keep this file in the repo?
# - It acts as a living reference for all required variables.
# - It helps new team members get started quickly.
# - It ensures consistency between local and production environments.
#
# Should I commit this file?
# - Commit a template (with placeholders, no secrets) as `.env.example` for reference.
# - Add `.env` to `.gitignore` if it contains real secrets.
#
# Context for environment-specific variables:
# - Some variables may need different values in development vs. production.
#   - Example: In development, you might use a personal email or test API key.
#   - In production, use your organization's email or a production API key.
# - Use `NODE_ENV` or `VITE_NODE_ENV` to distinguish between modes in your code.
# - Always double-check that secrets and sensitive data are never committed to version control.
#
# Typical workflow:
# 1. Developers use `.env` locally.
# 2. Production uses variables set in the Render dashboard.
# 3. Document all required variables in `.env` and/or `env-reference.md`.
#
# For more info, see your project's `env-reference.md` and deployment docs.